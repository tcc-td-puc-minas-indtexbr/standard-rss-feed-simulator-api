AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Standard Rss Feed Simulator Stack'
Resources:
  RestAPI:
    Properties:
      DefinitionBody:
        paths:
          "/ping":
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    statusCode: '200'
                passthroughBehavior: when_no_match
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
          "/":
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    statusCode: '200'
                passthroughBehavior: when_no_match
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
          "/alive":
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    statusCode: '200'
                passthroughBehavior: when_no_match
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
          "/feed":
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    statusCode: '200'
                passthroughBehavior: when_no_match
                type: mock
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  schema:
                    "$ref": "#/definitions/Empty"
                  description: 200 response
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandler.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
        definitions:
          Empty:
            title: Empty Schema
            type: object
        schemes:
          - https
        info:
          version: '1.0'
          title: standard-rss-feed-simulator-api
        swagger: '2.0'
        x-amazon-apigateway-binary-media-types:
          - application/octet-stream
          - application/x-tar
          - application/zip
          - audio/basic
          - audio/ogg
          - audio/mp4
          - audio/mpeg
          - audio/wav
          - audio/webm
          - image/png
          - image/jpg
          - image/jpeg
          - image/gif
          - video/ogg
          - video/mpeg
          - video/webm
      EndpointConfiguration: EDGE
      StageName: api
    Type: AWS::Serverless::Api
  APIHandlerInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPIId}/*
          - RestAPIId:
              Ref: RestAPI
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: APIHandler
    Type: AWS::Lambda::Permission
  APIHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: "./dist/deployment.zip"
      Handler: lambda.handler
      Role: arn:aws:iam::${AWS::AccountId}:role/lambda_role
      MemorySize: 128
      Runtime: nodejs12.x
      Environment:
        Variables:
          DEBUG: 'true'
          LOG_LEVEL: info
          APP_ENV: development
          API_ROOT: '/sigo-standard-rss'
      Timeout: 120
      Tags:
        Sector: IndTexBr
        Team: TCC TD SIGO
        App: standard-rss-feed-simulator-api
Outputs:
  EndpointURL:
    Value:
      Fn::Sub: https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/api/
  APIHandlerArn:
    Value:
      Fn::GetAtt:
        - APIHandler
        - Arn
  APIHandlerName:
    Value:
      Ref: APIHandler
  RestAPIId:
    Value:
      Ref: RestAPI
